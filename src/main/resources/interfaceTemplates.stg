javaInterface(package,interfaceName,parents,methods) ::= <<
package <package>;

public interface <interfaceName> <if(parents)>extends <parents;separator=", "> <endif>{<methods:{method|<javaMethod(returnType=method.returnType,name=method.name,firstArgument=first(method.arguments),arguments=rest(method.arguments))>}>
}

>>

javaMethod(returnType,name,firstArgument,arguments) ::= <<

    <returnType> <name>(<firstArgument:{<firstArgument|<firstArgument.type> <firstArgument.name>}><arguments:{argument|, <argument.type> <argument.name>}>);
>>


scalaTrait(package,interfaceName,parents,methods) ::= <<
package <package>;

trait <interfaceName> <if(parents)>extends <parents;separator=" with "> <endif>{<methods:{method|<scalaMethod(returnType=method.returnType,name=method.name,firstArgument=first(method.arguments),arguments=rest(method.arguments))>}>
}

>>

scalaMethod(returnType,name,firstArgument,arguments) ::= <<

    def <name>(<firstArgument:{<firstArgument|<firstArgument.name>: <firstArgument.type>}><arguments:{argument|, <argument.name>: <argument.type>}>): <returnType>
>>
