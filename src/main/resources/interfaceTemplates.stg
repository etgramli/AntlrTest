javaInterface(package,interfaceName,parents,methods) ::= <<
package <package>;

public interface <interfaceName> <if(parents)>extends <parents;separator=", "> <endif>{<methods:{method|<javaMethod(method.returnType,method.name,method.arguments)>}>
}

>>

javaMethod(returnType,name,arguments) ::= <<

    <returnType> <name>(<arguments:{argument|<argument.type> <argument.name>};separator=", ">);
>>


scalaTrait(package,interfaceName,parents,methods) ::= <<
package <package>;

trait <interfaceName> <if(parents)>extends <parents;separator=" with "> <endif>{<methods:{method|<scalaMethod(method.returnType,method.name,method.arguments)>}>
}

>>

scalaMethod(returnType,name,arguments) ::= <<

    def <name>(<arguments:{argument|<argument.name>: <argument.type>};separator=", ">): <returnType>
>>
